{"version":3,"sources":["trivia.png","services/fetchToken.js","services/fetchQuestionsAndAnswers.js","services/localStorage.js","helpers.js/randomizeQuestions.js","redux/actions/index.js","components/ConfigButton.js","pages/Login.js","pages/Config.js","services/getGravatarUrls.js","components/Header.js","components/GameCard.js","components/Timer.js","pages/Game.js","pages/Feedback.js","pages/Ranking.js","App.js","redux/reducers/playerReducer.js","redux/store/index.js","serviceWorker.js","index.js"],"names":["module","exports","fetchToken","a","fetch","resolve","json","response","token","fetchQuestionsAndAnswers","getRanking","actualRanking","localStorage","getItem","JSON","parse","saveRanking","playerData","playersList","setItem","stringify","saveInLocalStorage","userToken","randomizeQuestions","questionsToBeRandomized","map","element","difficulty","question","category","answers","incorrectAnswers","concat","correctAnswer","sort","Math","random","saveToken","type","expireChoices","hasExpired","payload","ConfigButton","to","data-testid","className","React","Component","Login","state","name","email","isButtonDisabled","validateEmail","length","setState","handleInput","target","value","handleSumbit","props","getToken","history","userToStore","push","this","src","logo","alt","htmlFor","onChange","disabled","onClick","connect","player","gravatarEmail","score","dispatch","setUser","Config","getGravatarUrl","hash","md5","toString","Header","componentDidUpdate","GameCard","getDifficulty","setDatatestId","correctness","index","checkCorrectness","buttonElement","dataset","saveScore","seconds","questions","handleClickInAnswer","endGame","hasChoicesExpired","el","key","data-correctness","content","buttonClass","time","diff","Timer","componentDidMount","tickTimer","componentWillUnmount","stopTimer","Game","gamePhase","isNextButtonShowed","timerID","setInterval","disableQuestionsButton","showNextButton","addColorsToButtons","resetTimer","prepareNextPhase","enableQuestionsButton","removeColorsFromButtons","hideNextButton","nextQuestion","Number","clearInterval","getQuestionsAndAnswers","document","querySelectorAll","forEach","classList","add","remove","renderNextButton","renderProperCard","NUMBERS","hasToken","fetchQuestionsAndAnswersThunk","THREE","requestAPI","response_code","newToken","results","correct_answer","incorrect_answers","incorrectElement","randomizedQuestions","Feedback","handleAssertions","assert","assertions","Ranking","renderRanking","sortedRanking","playerA","playerB","person","App","exact","path","component","INITIAL_STATE","questionButtons","playerReducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","Boolean","location","hostname","match","ReactDOM","render","basename","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3562a789.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","const URL = 'https://opentdb.com/api_token.php?command=request';\n\nconst fetchToken = async () => {\n  try {\n    const resolve = await fetch(URL);\n    const response = await resolve.json();\n    return response.token;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport default fetchToken;\n","const fetchQuestionsAndAnswers = async (token) => {\n  try {\n    const resolve = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const response = await resolve.json();\n    return response;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport default fetchQuestionsAndAnswers;\n","export const getRanking = () => {\n  const actualRanking = localStorage.getItem('PLAYER_RANKING');\n  return !actualRanking ? [] : JSON.parse(actualRanking);\n};\n\nexport const saveRanking = (playerData) => {\n  const playersList = getRanking();\n  localStorage.setItem('PLAYER_RANKING', JSON.stringify([...playersList, playerData]));\n};\n\nexport const saveInLocalStorage = (userToken) => {\n  localStorage.setItem('token', userToken);\n};\n\nexport const getFromLocalStorage = () => {\n  localStorage.getItem('token');\n};\n","const randomizeQuestions = (questionsToBeRandomized) => {\n  const ZERO_FIVE = 0.5;\n\n  const questionsAndAnswers = questionsToBeRandomized.map((element) => ({\n    difficulty: element.difficulty,\n    question: element.question,\n    category: element.category,\n    answers: element.incorrectAnswers\n      .concat(element.correctAnswer).sort(() => Math.random() - ZERO_FIVE),\n  }));\n\n  return questionsAndAnswers;\n};\n\nexport default randomizeQuestions;\n","import fetchToken from '../../services/fetchToken';\nimport fetchQuestionsAndAnswers from '../../services/fetchQuestionsAndAnswers';\nimport { saveInLocalStorage } from '../../services/localStorage';\nimport randomizeQuestions from '../../helpers.js/randomizeQuestions';\n\nexport const TEN = 10;\nexport const SET_SCORE = 'SET_SCORE';\nexport const SET_USER = 'SET_USER';\nexport const SAVE_USER_TOKEN = 'SAVE_USER_TOKEN';\nexport const SAVE_RESULTS = 'SAVE_RESULTS';\nexport const CHOICES_EXPIRED = 'CHOICES_EXPIRED';\n\nexport const saveToken = (userToken) => ({\n  type: SAVE_USER_TOKEN,\n  userToken,\n});\n\nexport const fetchTokenThunk = () => async (dispatch) => {\n  const userToken = await fetchToken();\n  dispatch(saveToken(userToken));\n  saveInLocalStorage(userToken);\n  return userToken;\n};\n\nexport const setUser = (name, email) => ({\n  type: SET_USER,\n  payload: {\n    name,\n    email,\n  },\n});\n\nconst saveResults = (results) => ({\n  type: SAVE_RESULTS,\n  payload: results,\n});\n\nexport const fetchQuestionsAndAnswersThunk = (token) => async (dispatch) => {\n  const THREE = 3;\n  const requestAPI = await fetchQuestionsAndAnswers(token);\n  if (requestAPI.response_code === THREE) {\n    const newToken = await fetchToken();\n    dispatch(fetchQuestionsAndAnswersThunk(newToken));\n  }\n  if (requestAPI.response_code === 0) {\n    const questions = requestAPI.results.map((question) => ({\n      difficulty: question.difficulty,\n      question: question.question,\n      category: question.category,\n      correctAnswer: [{ correctness: true, content: question.correct_answer }],\n      incorrectAnswers: question.incorrect_answers.map((incorrectElement, index) => ({\n        correctness: false,\n        content: incorrectElement,\n        index,\n      })),\n    }));\n    const randomizedQuestions = randomizeQuestions(questions);\n\n    dispatch(saveResults(randomizedQuestions));\n  }\n  return requestAPI;\n};\n\nexport const expireChoices = (hasExpired) => ({\n  type: CHOICES_EXPIRED,\n  payload: hasExpired,\n});\n\nexport const setScore = (timeInSec, dificulty) => ({\n  type: SET_SCORE,\n  payload: TEN + (timeInSec * dificulty),\n});\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass ConfigButton extends React.Component {\n  render() {\n    return (\n      <Link to=\"/config\">\n        <button\n          data-testid=\"btn-settings\"\n          type=\"button\"\n          className=\"settings-btn\"\n        >\n          Configurações\n        </button>\n      </Link>\n    );\n  }\n}\n\nexport default ConfigButton;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { setUser, fetchTokenThunk } from '../redux/actions';\nimport logo from '../trivia.png';\nimport ConfigButton from '../components/ConfigButton';\nimport './login.css';\nimport 'animate.css';\n\nclass Login extends React.Component {\n  state = {\n    name: '',\n    email: '',\n    isButtonDisabled: true,\n  }\n\n  validateEmail = () => {\n    const { name, email } = this.state;\n    if (name.length > 0 && email.length > 0) {\n      this.setState({\n        isButtonDisabled: false,\n      });\n    }\n  }\n\n  handleInput = ({ target: { name, value } }) => {\n    this.setState({\n      [name]: value,\n    }, this.validateEmail);\n  }\n\n  handleSumbit = async () => {\n    const { getToken, history, userToStore } = this.props;\n    const { name, email } = this.state;\n    userToStore(name, email);\n    await getToken();\n    history.push('/game');\n  };\n\n  render() {\n    const { name, email, isButtonDisabled } = this.state;\n    return (\n      <div className=\"login-page\">\n        <img\n          src={ logo }\n          className=\"App-logo animate__animated animate__flip animate__repeat-1\"\n          alt=\"logo\"\n        />\n        <div className=\"animate__animated animate__fadeInUp animate__delay-1s\">\n          <form className=\"loginForm\">\n            <label htmlFor=\"name\">\n              Name:\n              <input\n                onChange={ this.handleInput }\n                data-testid=\"input-player-name\"\n                name=\"name\"\n                type=\"text\"\n                value={ name }\n                className=\"login-input\"\n              />\n            </label>\n            <label htmlFor=\"email\">\n              E-mail:\n              <input\n                onChange={ this.handleInput }\n                data-testid=\"input-gravatar-email\"\n                name=\"email\"\n                type=\"email\"\n                value={ email }\n                className=\"login-input\"\n              />\n            </label>\n            <button\n              disabled={ isButtonDisabled }\n              type=\"button\"\n              data-testid=\"btn-play\"\n              onClick={ this.handleSumbit }\n            >\n              Play\n            </button>\n          </form>\n          <ConfigButton />\n        </div>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  getToken: PropTypes.func.isRequired,\n  userToStore: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nconst mapStateToProps = ({ player: { name, gravatarEmail, score } }) => ({\n  name,\n  gravatarEmail,\n  score,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  userToStore: (name, email) => dispatch(setUser(name, email)),\n  getToken: () => dispatch(fetchTokenThunk()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\n\nclass Config extends React.Component {\n  render() {\n    return (<h2 data-testid=\"settings-title\">Configurações</h2>);\n  }\n}\n\nexport default Config;\n","import md5 from 'crypto-js/md5';\n\nconst getGravatarUrl = (email) => {\n  const hash = md5(email).toString();\n  return `https://www.gravatar.com/avatar/${hash}`;\n};\n\nexport default getGravatarUrl;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport getGravatarUrl from '../services/getGravatarUrls';\nimport './header.css';\n\nclass Header extends React.Component {\n  componentDidUpdate = () => {\n    const { score } = this.props;\n    localStorage.setItem('score', score);\n  }\n\n  render() {\n    const { name, gravatarEmail, score } = this.props;\n    return (\n      <div className=\"header-content\">\n        <div>\n          <img\n            className=\"header-profile-picture\"\n            data-testid=\"header-profile-picture\"\n            src={ getGravatarUrl(gravatarEmail) }\n            alt=\"Gravatar\"\n          />\n          <p data-testid=\"header-player-name\" className=\"player-name\">\n            Name:\n            {' '}\n            {name}\n          </p>\n        </div>\n        <div className=\"score\">\n          Scores:\n          <p data-testid=\"header-score\">\n            {score}\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = ({ player: { name, gravatarEmail, score } }) => ({\n  name,\n  gravatarEmail,\n  score,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './GameCard.css';\nimport { setScore } from '../redux/actions';\n\nclass GameCard extends React.Component {\n  getDifficulty = (difficulty) => {\n    const THREE = 3;\n    switch (difficulty) {\n    case 'easy':\n      return 1;\n    case 'medium':\n      return 2;\n    case 'hard':\n      return THREE;\n    default:\n      break;\n    }\n  }\n\n  setDatatestId = (element) => (element.correctness === true\n    ? 'correct-answer'\n    : `wrong-answer-${element.index}`)\n\n  checkCorrectness = (buttonElement) => {\n    const { target: { dataset: { correctness } } } = buttonElement;\n    const { saveScore, seconds, questions: { difficulty } } = this.props;\n    if (correctness === 'true') {\n      saveScore(seconds, this.getDifficulty(difficulty));\n    }\n  };\n\n  handleClickInAnswer = (buttonElement) => {\n    const { endGame } = this.props;\n    this.checkCorrectness(buttonElement);\n    endGame();\n  };\n\n  render() {\n    const { hasChoicesExpired, questions } = this.props;\n\n    return (\n      <div className=\"game-card animate__animated animate__zoomIn\">\n        <h3\n          data-testid=\"question-category\"\n          className=\"question-category\"\n        >\n          { `Gategory: ${questions.category}`}\n        </h3>\n        <h3\n          data-testid=\"question-text\"\n          className=\"question-text\"\n        >\n          {questions.question}\n        </h3>\n        <div data-testid=\"answer-options\" className=\"answer-options\">\n          { questions.answers.map((el, index) => (\n            <button\n              className=\"answers animate__animated animate__zoomIn animate__delay-1s\"\n              data-testid={ this.setDatatestId(el, index) }\n              type=\"button\"\n              key={ index }\n              disabled={ hasChoicesExpired }\n              onClick={ this.handleClickInAnswer }\n              data-correctness={ el.correctness }\n            >\n              {el.content}\n            </button>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nGameCard.propTypes = {\n  hasChoicesExpired: PropTypes.bool.isRequired,\n  questions: PropTypes.PropTypes.objectOf(Object).isRequired,\n  // showNextButton: PropTypes.func.isRequired,\n  // addColorsToButtons: PropTypes.func.isRequired,\n  endGame: PropTypes.func.isRequired,\n  saveScore: PropTypes.func.isRequired,\n  seconds: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = ({ hasChoicesExpired, buttonClass }) => ({\n  hasChoicesExpired,\n  buttonClass,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveScore: (time, diff) => dispatch(setScore(time, diff)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Timer extends React.Component {\n  componentDidMount = () => {\n    const { tickTimer } = this.props;\n    tickTimer();\n  }\n\n  componentWillUnmount = () => {\n    const { stopTimer } = this.props;\n    stopTimer();\n  }\n\n  componentDidUpdate = () => {\n    const { seconds, endGame } = this.props;\n    const ZERO = 0;\n    if (seconds === ZERO) {\n      endGame();\n    }\n  }\n\n  render() {\n    const { seconds } = this.props;\n    return (\n      <h1>{`${seconds}s`}</h1>\n    );\n  }\n}\n\nTimer.propTypes = {\n  tickTimer: PropTypes.func.isRequired,\n  endGame: PropTypes.func.isRequired,\n  stopTimer: PropTypes.func.isRequired,\n  seconds: PropTypes.number.isRequired,\n};\n\nexport default connect()(Timer);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport { expireChoices, fetchQuestionsAndAnswersThunk } from '../redux/actions';\nimport GameCard from '../components/GameCard';\nimport Timer from '../components/Timer';\nimport { saveRanking } from '../services/localStorage';\n\nconst RED_BACKGROUND = 'background-red';\nconst GREEN_BACKGROUND = 'background-green';\n\nclass Game extends React.Component {\n  state = {\n    gamePhase: '0',\n    isNextButtonShowed: false,\n    seconds: 30,\n  }\n\n  tickTimer = () => {\n    const ONE_SECOND = 1000;\n    this.timerID = setInterval(() => {\n      this.setState((state) => ({\n        seconds: state.seconds - 1,\n      }));\n    }, ONE_SECOND);\n  }\n\n  endGame = () => {\n    const { disableQuestionsButton } = this.props;\n    this.stopTimer();\n    disableQuestionsButton();\n    this.showNextButton();\n    this.addColorsToButtons();\n  }\n\n  resetTimer = () => {\n    this.setState(() => ({\n      seconds: 30,\n    }), this.tickTimer);\n  }\n\n  prepareNextPhase = () => {\n    const { enableQuestionsButton } = this.props;\n    this.removeColorsFromButtons();\n    this.hideNextButton();\n    this.resetTimer();\n    enableQuestionsButton();\n  }\n\n  nextQuestion = () => {\n    this.setState((state) => ({\n      gamePhase: `${Number(state.gamePhase) + 1}`,\n    }), this.prepareNextPhase);\n  }\n\n  stopTimer = () => {\n    clearInterval(this.timerID);\n  }\n\n  componentDidMount = async () => {\n    const { token, getQuestionsAndAnswers } = this.props;\n    getQuestionsAndAnswers(token);\n  }\n\n  addColorsToButtons = () => {\n    const buttons = document.querySelectorAll('.answers');\n    buttons.forEach((element) => {\n      if (element.dataset.correctness === 'false') {\n        element.classList.add(RED_BACKGROUND);\n      } else {\n        element.classList.add(GREEN_BACKGROUND);\n      }\n    });\n  }\n\n  removeColorsFromButtons = () => {\n    const elementoToBeColored = document.querySelectorAll('.answers');\n    elementoToBeColored.forEach((element) => {\n      element.classList.remove(RED_BACKGROUND);\n      element.classList.remove(GREEN_BACKGROUND);\n    });\n  }\n\n  showNextButton = () => {\n    this.setState({\n      isNextButtonShowed: true,\n    });\n  }\n\n  hideNextButton = () => {\n    this.setState({\n      isNextButtonShowed: false,\n    });\n  }\n\n  renderNextButton = () => {\n    const { isNextButtonShowed } = this.state;\n    if (isNextButtonShowed) {\n      return (\n        <button\n          data-testid=\"btn-next\"\n          type=\"button\"\n          onClick={ this.nextQuestion }\n          className=\"next-button\"\n        >\n          next\n        </button>);\n    }\n  }\n\n  renderProperCard = () => {\n    const { gamePhase, isNextButtonShowed, seconds } = this.state;\n    const { questions, history, player } = this.props;\n\n    if (questions.length > 0) {\n      const NUMBERS = ['0', '1', '2', '3', '4', '5'];\n\n      switch (gamePhase) {\n      case NUMBERS[0]:\n        return (<GameCard\n          seconds={ seconds }\n          endGame={ this.endGame }\n          addColorsToButtons={ this.addColorsToButtons }\n          isNextButtonShowed={ isNextButtonShowed }\n          questions={ questions[0] }\n          showNextButton={ this.showNextButton }\n        />);\n      case NUMBERS[1]:\n        return (<GameCard\n          seconds={ seconds }\n          endGame={ this.endGame }\n          addColorsToButtons={ this.addColorsToButtons }\n          isNextButtonShowed={ isNextButtonShowed }\n          showNextButton={ this.showNextButton }\n          questions={ questions[1] }\n        />);\n      case NUMBERS[2]:\n        return (<GameCard\n          seconds={ seconds }\n          endGame={ this.endGame }\n          addColorsToButtons={ this.addColorsToButtons }\n          isNextButtonShowed={ isNextButtonShowed }\n          showNextButton={ this.showNextButton }\n          questions={ questions[2] }\n        />);\n      case NUMBERS[3]:\n        return (<GameCard\n          seconds={ seconds }\n          endGame={ this.endGame }\n          addColorsToButtons={ this.addColorsToButtons }\n          isNextButtonShowed={ isNextButtonShowed }\n          showNextButton={ this.showNextButton }\n          questions={ questions[3] }\n        />);\n      case NUMBERS[4]:\n        return (<GameCard\n          seconds={ seconds }\n          endGame={ this.endGame }\n          addColorsToButtons={ this.addColorsToButtons }\n          isNextButtonShowed={ isNextButtonShowed }\n          showNextButton={ this.showNextButton }\n          questions={ questions[4] }\n        />);\n      case NUMBERS[5]:\n        saveRanking(player);\n        history.push('/feedback');\n        break;\n      default:\n        return null;\n      }\n    }\n  }\n\n  render() {\n    const { seconds } = this.state;\n    return (\n      <>\n        <Header />\n        <Timer\n          endGame={ this.endGame }\n          addColorsToButtons={ this.addColorsToButtons }\n          stopTimer={ this.stopTimer }\n          tickTimer={ this.tickTimer }\n          seconds={ seconds }\n        />\n        { this.renderProperCard() }\n        { this.renderNextButton()}\n      </>\n    );\n  }\n}\n\nGame.propTypes = {\n  token: PropTypes.string.isRequired,\n  getQuestionsAndAnswers: PropTypes.func.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.object).isRequired,\n  enableQuestionsButton: PropTypes.func.isRequired,\n  disableQuestionsButton: PropTypes.func.isRequired,\n  history: PropTypes.objectOf(Object).isRequired,\n  player: PropTypes.shape().isRequired,\n};\n\nconst mapStateToProps = ({ hasToken, token, questions, player }) => ({\n  hasToken,\n  token,\n  questions,\n  player,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getQuestionsAndAnswers: (token) => dispatch(fetchQuestionsAndAnswersThunk(token)),\n  enableQuestionsButton: () => dispatch(expireChoices(false)),\n  disableQuestionsButton: () => dispatch(expireChoices(true)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport './feedback.css';\n\nclass Feedback extends React.Component {\n  // Lint?\n  handleAssertions = (assert) => {\n    const COULD_BE_BETTER = 'Could be better...';\n    const WELL_DONE = 'Well Done!';\n\n    switch (assert) {\n    case 0:\n      return COULD_BE_BETTER;\n    case 1:\n      return COULD_BE_BETTER;\n    case 2:\n      return COULD_BE_BETTER;\n    default:\n      return WELL_DONE;\n    }\n  }\n\n  render() {\n    const { assertions, score, history } = this.props;\n    return (\n      <>\n        <Header />\n        <div className=\"feedback animate__animated animate__rotateIn\">\n          <h1 data-testid=\"feedback-text\">\n            {this.handleAssertions(assertions)}\n          </h1>\n          <div className=\"assertions\">\n            <p>Voce acertou</p>\n            <h3 data-testid=\"feedback-total-question\">{assertions}</h3>\n            <p>perguntas</p>\n          </div>\n          <div className=\"assertions\">\n            <p>Seu placar final é</p>\n            <h3 data-testid=\"feedback-total-score\">{score}</h3>\n            <p>pontos</p>\n          </div>\n        </div>\n        <div\n          className=\"buttons-fdbck animate__animated animate__fadeInUp animate__delay-2s\"\n        >\n          <button\n            data-testid=\"btn-play-again\"\n            type=\"button\"\n            onClick={ () => history.push('/') }\n          >\n            Jogar novamente\n          </button>\n          <button\n            data-testid=\"btn-ranking\"\n            type=\"button\"\n            onClick={ () => history.push('/ranking') }\n          >\n            Melhores resultados\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  history: PropTypes.objectOf(Object).isRequired,\n};\n\nconst mapStateToProps = ({ player: { assertions, name, score } }) => ({\n  assertions,\n  name,\n  score,\n\n});\n\nexport default connect(mapStateToProps)(Feedback);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getRanking } from '../services/localStorage';\nimport getGravatarUrl from '../services/getGravatarUrls';\nimport './ranking.css';\n\nclass Ranking extends React.Component {\n  renderRanking = () => {\n    /* const { player } = this.props;\n    saveRanking(player); */\n\n    const playersRanking = getRanking();\n    const sortedRanking = playersRanking\n      .sort((playerA, playerB) => playerB.score - playerA.score);\n    return (\n      <tbody>\n        {\n          sortedRanking.map((person, index) => {\n            const { gravatarEmail, name, score } = person;\n            return (\n              <tr key={ index }>\n                <td>\n                  <img\n                    src={ getGravatarUrl(gravatarEmail) }\n                    className=\"profile-picture\"\n                    alt=\"Gravatar\"\n                  />\n                </td>\n                <td data-testid={ `player-name-${index}` }>{name}</td>\n                <td data-testid={ `player-score-${score}` }>{score}</td>\n              </tr>\n            );\n          })\n        }\n      </tbody>\n    );\n  }\n\n  render() {\n    const { history } = this.props;\n    return (\n      <>\n        <h1 data-testid=\"ranking-title\">Ranking</h1>\n        <table className=\"ranking-table animate__animated animate__fadeInDownBig\">\n          <thead>\n            <tr>\n              <th>Player</th>\n              <th>Name</th>\n              <th>Scores</th>\n            </tr>\n          </thead>\n          { this.renderRanking() }\n        </table>\n        <button\n          data-testid=\"btn-go-home\"\n          type=\"button\"\n          className=\"button-back-to-home\"\n          onClick={ () => history.push('/') }\n        >\n          Voltar ao inicio\n        </button>\n      </>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.objectOf(Object).isRequired,\n  player: PropTypes.shape.isRequired,\n};\n\nconst mapStateToProps = ({ player }) => ({\n  player,\n});\n\nexport default connect(mapStateToProps)(Ranking);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Login from './pages/Login';\nimport Config from './pages/Config';\nimport Game from './pages/Game';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/config\" component={ Config } />\n        <Route path=\"/game\" component={ Game } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/ranking\" component={ Ranking } />\n      </Switch>\n    </div>\n  );\n}\n","import {\n  SET_USER,\n  SAVE_USER_TOKEN,\n  SAVE_RESULTS,\n  CHOICES_EXPIRED,\n  SET_SCORE,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  player: {\n    name: '',\n    gravatarEmail: '',\n    score: 0,\n    assertions: 0,\n  },\n  questionButtons: {\n    className: '',\n  },\n  token: '',\n  questions: [],\n  hasChoicesExpired: false,\n};\n\nconst playerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SET_USER:\n    return {\n      ...state,\n      player: {\n        name: action.payload.name,\n        gravatarEmail: action.payload.email,\n        score: 0,\n        assertions: 0,\n      },\n    };\n  case SAVE_USER_TOKEN:\n    return {\n      ...state,\n      token: action.userToken,\n    };\n  case SAVE_RESULTS:\n    return {\n      ...state,\n      questions: action.payload,\n    };\n  case CHOICES_EXPIRED:\n    return {\n      ...state,\n      hasChoicesExpired: action.payload,\n    };\n  case SET_SCORE:\n    return {\n      ...state,\n      player: {\n        name: state.player.name,\n        gravatarEmail: state.player.gravatarEmail,\n        score: state.player.score + action.payload,\n        assertions: state.player.assertions + 1,\n      },\n    };\n  default:\n    return state;\n  }\n};\n\nexport default playerReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport playerReducer from '../reducers/playerReducer';\n\nconst store = createStore(\n  playerReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n  <Provider store={ store }>\n    <BrowserRouter basename={ process.env.PUBLIC_URL }>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}